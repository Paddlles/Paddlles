Task 1: Instructions
Read in and take a look at the Cookie cats AB-test data.

Import the pandas module.
Read in the AB-test data datasets/cookie_cats.csv as a DataFrame and assign it to df.
Take a look at the first few rows of df.

Task 2:
2. The AB-test data
The data we have is from 90,189 players that installed the game while the AB-test was running. The variables are:

Data Dictionary
  userid - a unique number that identifies each player.
  version - whether the player was put in the control group (gate_30 - a gate at level 30) or the group with the moved gate (gate_40 - a gate at level 40).
  sum_gamerounds - the number of game rounds played by the player during the first 14 days after install.
  retention_1 - did the player come back and play 1 day after installing?
  retention_7 - did the player come back and play 7 days after installing?
  When a player installed the game, he or she was randomly assigned to either gate_30 or gate_40. As a sanity check, let's see if there are roughly the same number of players in each AB group.

Task 3:
Plot the distribution of game rounds.

Group by 'sum_gamerounds' and then count userid. Assign the result to plot_df.
Use the pandas .plot() method to plot a histogram of the first 100 rows of plot_df with sum_gamerounds on the X-axis and userid on the Y-axis.
Assign the plot to ax.
[Optional] Set the X-label and Y-label to something informative.
To select the first 100 rows of plot_df you can use the .head() method, but you have to set the first argument to head to 100.

Notes: Depending on how groupby method is used, the column that you are grouping by will often become the index of the resulting dataframe. This makes graphing with matplotlib less straightforward. You can either filter the dataframe down then graph. 
Or use the use_index parameter in the .plot function. EXAMPLE: .plot(x=col1, y=col2, kind=hist, use_index=True)

Task 4:
Calculate overall 1-day retention.

Calculate and display the proportion of True values in the column df['retention_1'].
There are two ways of calculating the proportion of True values in a column. Assuming the column is my_df['a_col']:

my_df['a_col'].sum() / my_df['a_col'].count() : That is, sum the column and divide by the total number of values. This works because when using .sum() the True/False values will first be converted to 1/0.
my_df['a_col'].mean() : This works because the mean is calculated by summing the values and dividing by the total number of values.

Notes: True/False values and math aggregate functions have a special way of interacting. EXAMPLE: When the sum() function is used on a True/False column, True is treated as 1 and False is treated as 0. This also works for the mean() function. 

Task 5:
Calculate 1-day retention for each AB-group.

Calculate and display the proportion of True values in the column df['retention_1'] for each group defined by 'version'.
To calculate this, you can simply copy-and-paste the solution from task 4. You will then have to modify the code by adding .groupby('version') in the right places.

Task 6:
Do a bootstrap analysis of 1-day retention and plot the result.

Perform 500 bootstrap replications and append them to boot_1d. Each replication should re-sample from df and calculate the mean retention for each AB-group defined by version.
Turn the list boot_1d into a DataFrame.
Use the pandas .plot() method to plot boot_1d as a Kernel Density Plot.
In the code, each boot_mean should be calculated by first sampling df with .sample, and then grouping by version and calculating the mean of retention_1. All of this can be done in one line. When using sample remember to set frac=1 and replace=True.

To turn boot_1d into a DataFrame, you could simply use the pandas DataFrame creation function.

For how to create a density plot from a pandas DataFrame take a look at this documentation.

This is a tricky task, so don't be afraid to look at the ↓ hint ↓ below. There's no penalty!

Task 7: Instructions
Calculate and plot the % difference in 1-day retention between the two AB-groups.

Calculate the bootstrap % difference in 1-day retention by: Calculating the difference between gate_30 and gate_40, dividing by gate_40, and multiplying by 100 to turn the proportion into a percentage.
Assign the resulting column to boot_1d['diff'].
Plot boot_1d['diff'] as a Kernel Density Plot using the .plot method and assign the result to ax.
[Optional] Give the plot a nice X-label.
Since mathematical operators are vectorized in pandas, we can easily write expressions that calculate values by row. For example, if my_df is this DataFrame:

a	b
0	1.1	1
1	2.4	2
2	2.7	3
You can calculate how much larger (in %) each a is compared to b:

my_df['diff'] = (
    (my_df['a'] - my_df['b']) /
         my_df['b'] * 100 )
Which yields this:

a	b	diff
0	1.1	1	10.0
1	2.4	2	20.0
2	2.7	3	-10.0

Task 8: Instructions
Calculate the probability that a gate at level 30 gives higher 1-day retention.

Calculate the proportion of boot_1d['diff'] that is above 0.0. Assign it to prob.
Pretty print prob so that it is formatted as a percentage.
If vals is a Series of numbers you can calculate the proportion of vals above 0.0 like this:

(vals > 0).sum() / len(vals)
or like this:

(vals > 0).mean()
For a convenient way of pretty printing percentages see this StackOverflow answer.

Task 9: Instructions
Calculate the 7-day retention for each AB-group.

Calculate and display the proportion of True values in the column df['retention_7'] for each group defined by 'version'.
The solution to this task is almost the same as in task 5.

Task 10: Instructions
Do a bootstrap analysis for the difference in 7-day retention.

Copy and paste in the code from task 6, 7, and 8.
Modify the code to do a bootstrap analysis of 7-day retention (retention_7) instead of 1-day retention. The list/DataFrame to hold the bootstrap samples should be named boot_7d.
In this task, you will bring everything together that you've coded in task 6, 7, and 8. But now you will apply the bootstrap analysis to a new variable: retention_7.

References:
1. https://stackoverflow.com/questions/56308830/convert-list-of-pandas-series-to-pandas-dataframe (Convert List of Panda Series to Dataframe)
2. https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#visualization-kde (Density Plots)
